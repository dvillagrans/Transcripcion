#!/usr/bin/env python3
"""
Script para reiniciar el servicio de transcripci√≥n con configuraci√≥n anti-cuDNN crashes
"""

import os
import sys
import time
import subprocess
import signal
import socket
from pathlib import Path

def check_port(port, host='localhost'):
    """Verificar si un puerto est√° en uso"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(1)
            result = sock.connect_ex((host, port))
            return result == 0
    except:
        return False

def kill_transcription_processes():
    """Matar todos los procesos de transcripci√≥n"""
    try:
        # Buscar procesos de transcripci√≥n
        result = subprocess.run(['pgrep', '-f', 'transcription_service.py'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            pids = result.stdout.strip().split('\n')
            for pid in pids:
                if pid:
                    print(f"üî™ Matando proceso transcripci√≥n PID: {pid}")
                    try:
                        os.kill(int(pid), signal.SIGTERM)
                        time.sleep(2)
                        # Si sigue vivo, usar SIGKILL
                        try:
                            os.kill(int(pid), 0)  # Verificar si existe
                            os.kill(int(pid), signal.SIGKILL)
                            print(f"üî™ Proceso {pid} forzado a terminar")
                        except ProcessLookupError:
                            pass  # Ya termin√≥
                    except ProcessLookupError:
                        pass  # Ya no existe
        else:
            print("‚úÖ No hay procesos de transcripci√≥n ejecut√°ndose")
            
    except Exception as e:
        print(f"Error matando procesos: {e}")

def set_cuda_environment():
    """Configurar variables de entorno para evitar cuDNN crashes"""
    print("üîß Configurando entorno CUDA anti-crashes...")
    
    # Desactivar cuDNN completamente
    os.environ['CUDNN_ENABLED'] = 'false'
    os.environ['TORCH_CUDNN_ENABLED'] = 'false'
    
    # Configuraci√≥n de memoria CUDA
    os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:512'
    os.environ['CUDA_MEMORY_FRACTION'] = '0.8'
    
    # Forzar uso de implementaciones CUDA nativas en lugar de cuDNN
    os.environ['CUDNN_CONVOLUTION_FWD_ALGO'] = '0'  # IMPLICIT_GEMM
    os.environ['CUDNN_CONVOLUTION_BWD_DATA_ALGO'] = '0'
    os.environ['CUDNN_CONVOLUTION_BWD_FILTER_ALGO'] = '0'
    
    # Configuraci√≥n robusta
    os.environ['ROBUST_MODE'] = 'true'
    
    print("‚úÖ Variables de entorno CUDA configuradas")

def start_transcription_service():
    """Iniciar el servicio de transcripci√≥n con configuraci√≥n robusta"""
    print("üöÄ Iniciando servicio de transcripci√≥n...")
    
    # Configurar entorno
    set_cuda_environment()
    
    # Obtener path del Python virtual env
    venv_python = Path(__file__).parent / '.venv' / 'bin' / 'python'
    if not venv_python.exists():
        # Probar con el env folder como fallback
        venv_python = Path(__file__).parent / 'env' / 'bin' / 'python'
        if not venv_python.exists():
            print("‚ùå No se encontr√≥ entorno virtual, usando Python del sistema")
            venv_python = 'python3'
    else:
        print(f"‚úÖ Usando entorno virtual: {venv_python}")
    
    script_path = Path(__file__).parent / 'transcription_service.py'
    
    # Iniciar proceso
    process = subprocess.Popen(
        [str(venv_python), str(script_path)],
        cwd=Path(__file__).parent,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
        env=os.environ.copy()
    )
    
    print(f"üîÑ Proceso iniciado con PID: {process.pid}")
    
    # Esperar a que el servicio est√© disponible
    print("‚è≥ Esperando a que el servicio est√© disponible...")
    for i in range(60):  # 60 segundos m√°ximo
        if check_port(5000):
            print("‚úÖ Servicio de transcripci√≥n disponible en puerto 5000")
            return process
        
        # Verificar si el proceso sigue vivo
        if process.poll() is not None:
            print("‚ùå El proceso termin√≥ inesperadamente")
            # Mostrar √∫ltimas l√≠neas de output
            try:
                stdout, stderr = process.communicate(timeout=1)
                if stdout:
                    print("üìÑ √öltimas l√≠neas de salida:")
                    print(stdout[-1000:])  # √öltimos 1000 caracteres
            except:
                pass
            return None
            
        time.sleep(1)
        if i % 10 == 9:
            print(f"‚è≥ Esperando... ({i+1}/60 segundos)")
    
    print("‚ùå El servicio no pudo iniciarse en 60 segundos")
    process.terminate()
    return None

def main():
    """Funci√≥n principal"""
    print("üîÑ REINICIANDO SERVICIO DE TRANSCRIPCI√ìN")
    print("=" * 50)
    
    # 1. Matar procesos existentes
    print("\n1Ô∏è‚É£ Limpiando procesos existentes...")
    kill_transcription_processes()
    
    # 2. Esperar un poco para que los puertos se liberen
    print("\n2Ô∏è‚É£ Esperando liberaci√≥n de puertos...")
    time.sleep(3)
    
    # 3. Verificar que el puerto est√© libre
    if check_port(5000):
        print("‚ö†Ô∏è Puerto 5000 a√∫n ocupado, esperando m√°s...")
        time.sleep(5)
        if check_port(5000):
            print("‚ùå Puerto 5000 sigue ocupado. Puede que haya otro proceso.")
            print("   Ejecuta: sudo lsof -i :5000")
            return False
    
    # 4. Iniciar servicio
    print("\n3Ô∏è‚É£ Iniciando servicio con configuraci√≥n robusta...")
    process = start_transcription_service()
    
    if process:
        print("\n‚úÖ ¬°SERVICIO DE TRANSCRIPCI√ìN REINICIADO EXITOSAMENTE!")
        print(f"   ‚Ä¢ PID: {process.pid}")
        print(f"   ‚Ä¢ URL: http://localhost:5000")
        print(f"   ‚Ä¢ Configuraci√≥n: GPU con cuDNN desactivado")
        print("\nüí° Para verificar: curl http://localhost:5000/health")
        return True
    else:
        print("\n‚ùå Error reiniciando el servicio")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)